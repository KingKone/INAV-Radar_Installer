'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _multiProgress = require('multi-progress');

var _multiProgress2 = _interopRequireDefault(_multiProgress);

var _getReleases = require('./getReleases');

var _getReleases2 = _interopRequireDefault(_getReleases);

var _getLatest = require('./getLatest');

var _getLatest2 = _interopRequireDefault(_getLatest);

var _download = require('./download');

var _download2 = _interopRequireDefault(_download);

var _extract = require('./extract');

var _extract2 = _interopRequireDefault(_extract);

var _rpad = require('./rpad');

var _rpad2 = _interopRequireDefault(_rpad);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function pass() {
  return true;
}

function downloadRelease(user, repo, outputdir) {
  var filterRelease = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : pass;
  var filterAsset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : pass;
  var leaveZipped = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

  var bars = new _multiProgress2.default(process.stdout);

  return (0, _getReleases2.default)(user, repo).then(function (releases) {
    return (0, _getLatest2.default)(releases, filterRelease, filterAsset);
  }).then(function (release) {
    if (!release) {
      throw new Error('could not find a release for ' + user + '/' + repo + ' (' + _os2.default.platform() + ' ' + _os2.default.arch() + ')');
    }

    console.log('Downloading ' + user + '/' + repo + '@' + release.tag_name + '...');

    var promises = release.assets.map(function (asset) {
      var bar = bars.newBar((0, _rpad2.default)(asset.name, 24) + ' :bar :etas', {
        complete: 'â–‡',
        incomplete: '-',
        width: process.stdout.columns - 36,
        total: 100
      });

      var progress = process.stdout.isTTY ? bar.update.bind(bar) : pass;

      var destf = _path2.default.join(outputdir, asset.name);
      var dest = _fs2.default.createWriteStream(destf);

      return (0, _download2.default)(asset.browser_download_url, dest, progress).then(function () {
        if (!leaveZipped && /\.zip$/.exec(destf)) {
          return (0, _extract2.default)(destf, outputdir).then(function () {
            return _fs2.default.unlinkSync(destf);
          });
        }

        return null;
      });
    });

    return Promise.all(promises);
  });
}

exports.default = downloadRelease;