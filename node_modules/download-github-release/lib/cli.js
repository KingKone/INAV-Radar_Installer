'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _downloadRelease = require('./downloadRelease');

var _downloadRelease2 = _interopRequireDefault(_downloadRelease);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var version = JSON.parse(_fs2.default.readFileSync(_path2.default.resolve(__dirname, '../package.json'))).version;

_commander2.default.version(version).arguments('<user> <repo> [outputdir]').option('-p, --prerelease', 'download prerelease').option('-s, --search <regexp>', 'filter assets name').option('-z, --zipped', 'don\'t extract zip files').parse(process.argv);

var user = _commander2.default.args[0];
var repo = _commander2.default.args[1];
var outputdir = _commander2.default.args[2] || process.cwd();

if (!user || !repo) {
  _commander2.default.help();
}

function filterRelease(release) {
  return release.draft === false && release.prerelease === !!_commander2.default.prerelease;
}

function filterAsset(asset) {
  if (!_commander2.default.search) {
    return true;
  }

  return new RegExp(_commander2.default.search).exec(asset.name);
}

(0, _downloadRelease2.default)(user, repo, outputdir, filterRelease, filterAsset, !!_commander2.default.zipped).catch(function (err) {
  return console.error(err.message);
});